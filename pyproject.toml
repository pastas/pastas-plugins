[build-system]
requires = ["setuptools>=64.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pastas_plugins"
dynamic = ["version"]
description = "Repository containing plugins to further enhance your pastas experience."
license = { file = "LICENSE" }
readme = "README.md"
authors = [{ name = "Pastas Developers Team" }]
maintainers = [
        { name = "D.A. Brakenhoff", email = "d.brakenhoff@artesia-water.nl" },
        { name = "M.A. Vonk", email = "m.vonk@artesia-water.nl" },
        { name = "M. Bakker", email = "markbak@gmail.com" },
]

requires-python = ">= 3.9"
dependencies = ["pastas"]
keywords = ["hydrology", "groundwater", "timeseries", "analysis"]
classifiers = [
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Science/Research',
        'Intended Audience :: Other Audience',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3 :: Only',
        'Programming Language :: Python :: 3.9',
        'Programming Language :: Python :: 3.10',
        'Programming Language :: Python :: 3.11',
        'Programming Language :: Python :: 3.12',
        'Topic :: Scientific/Engineering :: Hydrology',
]

[project.urls]
homepage = "https://pastas.dev"
repository = "https://github.com/pastas/pastas-plugins"
documentation = "https://pastas.readthedocs.io"

[project.optional-dependencies]
all = ["pastas_plugins[modflow,crosscorrelation]"]
crosscorrelation = ["statsmodels"]
modflow = ["flopy"]
reservoirs = ["pastas_plugins"] # placeholder for empty dependencies
responses = ["pastas_plugins"] # placeholder for empty dependencies
ruffing = ["ruff"]
pytesting = ["pytest>=7", "pytest-cov", "pytest-sugar"]
ci = ["coverage"]
rtd = [
        "pastas_plugins[all]",
        "sphinx_rtd_theme",
        "myst_nb",
        "numpydoc",
        "sphinx_design",
        "tqdm",
]

[tool.setuptools.dynamic]
version = { attr = "pastas_plugins.version.__version__" }

[tool.ruff]
extend-include = ["*.ipynb"]
lint.extend-select = ["I"]
show-fixes = true
fix = true


[tool.tox]
legacy_tox_ini = """
    [tox]
    requires = tox>=4
    env_list = py{39,310,311,312}

    [testenv:all]
    description = run all unit tests and obtain coverage
    basepython = python3.10
    extras = ci,pytesting,all
    commands =
            coverage run -m pytest tests
            coverage xml

    [testenv:cross_correlation]
    description = run all unit tests for cross_correlation plugin
    extras = pytesting,crosscorrelation
    commands =
            pytest tests/test_crosscorrelation.py

    [testenv:modflow]
    description = run all unit tests for modflow plugin
    extras = pytesting,modflow
    commands =
            pytest tests/test_modflow.py

    [testenv:responses]
    description = run all unit tests for responses plugin
    extras = pytesting,responses
    commands =
            pytest tests/test_responses.py

    [testenv:reservoirs]
    description = run all unit tests for reservoirs plugin
    extras = pytesting,reservoirs
    commands =
            pytest tests/test_reservoirs.py

    [testenv:ruff]
    description = run ruff checks
    basepython = python3.10
    extras = ruffing
    commands =
            ruff check --extend-select I --preview
            ruff format --check

    [testenv:ruff_fix]
    description = run ruff locally and fix issues
    extras = ruffing
    commands =
            ruff check --extend-select I --fix
            ruff format

"""
